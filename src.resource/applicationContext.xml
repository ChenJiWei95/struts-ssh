<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd">
	<!-- property中的name字段必须与示例中的属性名相同 -->
	
	<!-- 注解部分 测试 -->
	
	<!-- 加载配置文件 -->
	<context:property-placeholder location="classpath*:/config.properties"
		ignore-resource-not-found="true" ignore-unresolvable="true" />
	
	<!-- redis数据源 -->
    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <!-- 最大空闲数 -->
        <property name="maxIdle" value="${redis.maxIdle}" />
        <!-- 最大空连接数 -->
        <property name="maxTotal" value="${redis.maxTotal}" />
        <!-- 最大等待时间 -->
        <property name="maxWaitMillis" value="${redis.maxWaitMillis}" />
        <!-- 返回连接时，检测连接是否成功 -->
        <property name="testOnBorrow" value="${redis.testOnBorrow}" />
    </bean> 
    
    <!-- Spring-redis连接池管理工厂 -->
    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <!-- IP地址 -->
        <property name="hostName" value="${redis.host}" />
        <!-- 端口号 -->
        <property name="port" value="${redis.port}" />
		<property name="password" value="${redis.password}" />
        <!-- 超时时间 默认2000-->
        <property name="timeout" value="${redis.timeout}" />
        <!-- 连接池配置引用 -->
        <property name="poolConfig" ref="poolConfig" />
        <!-- usePool：是否使用连接池 -->
        <property name="usePool" value="true"/>
    </bean> 
    
    <!-- redis template definition -->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="jedisConnectionFactory" />
        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
        </property>
        <property name="valueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
        </property>
        <property name="hashKeySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
        </property>
        <property name="hashValueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
        </property>
        <!--开启事务  -->  
        <property name="enableTransactionSupport" value="true"></property>  
    </bean>
    
    
	
	<!--自定义redis工具类,在需要缓存的地方注入此类  -->  
    <bean id="redisService" class="com.shop.util.RedisService">  
        <!-- <property name="redisTemplate" ref="redisTemplate" />   -->
        <constructor-arg ref="redisTemplate" />
    </bean> 
	
	<!-- 使用Annotation自动注册Bean，解决事物失效问题：在主容器中不扫描@Controller注解，在SpringMvc中只扫描@Controller注解。 -->
	<context:component-scan base-package="com" /> 
	
	<!-- autowire="byName" 当前对象中有自动注解属性时需配置 -->
	<!-- <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"></property>
	</bean> -->
	
	<!-- 数据源配置 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"> 
		<property name="driverClassName" value="${pool.jdbc.driver}"></property>
		<property name="url" value="${pool.jdbc.url}"></property>
		<property name="username" value="${pool.jdbc.username}"></property>
		<property name="password" value="${pool.jdbc.password}"></property> 
	</bean>
	
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<prop key="hibernate.temp.use_jdbc_metadata_defaults">false</prop>
				<prop key="javax.persistence.validation.mode">none</prop>
				<prop key="hibernate.current_session_context_class">
					org.springframework.orm.hibernate4.SpringSessionContext
				</prop>
			</props>
		</property>
		<!-- 使用注解时 扫描的位置  -->
		<property name="packagesToScan">
			<list>
				<value>com.shop.entity</value>
			</list>
		</property>
		<!-- 
		指定映射的文件路径 
		<property name="mappingDirectoryLocations">
			 <list>
			 	<value>WEB-INF/mapping</value>
			 </list>
		</property>
		-->
		
		<!-- 
		指定classpath下具体映射文件名 
		利用list同时指定多个 映射文件-->
		<!-- <property name="mappingResources">
			<list>
				<value>com/shop/entity/User.hbm.xml</value>
			</list>  
		</property> -->
		<!-- 
		可以指定任何文件路径
		通配符模式载入所有的映射文件
		<property name="mappingLocations">
    		<value>classpath:/com/shop/entity/*.hbm.xml</value>  
		</property> 
		-->
	</bean>
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- 注解事务 -->
	<!-- <tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="true" /> -->
		
	<!-- 使用annotation注解方式配置事务 -->
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
	<!-- 切面编程 -->	
	<aop:aspectj-autoproxy proxy-target-class="true"/>
	<!-- //使用AOP注解 -->
	<aop:aspectj-autoproxy />
	
	<!-- autowire="byName" 当前对象中有自动注解属性时需配置 -->
	<!--
	<bean id="userDaoImpl" class="com.shop.daoImpl.UserDaoImpl" autowire="byName" />
	--> 
</beans>